name: TW CI

on:
  push:
    branches:
      - master
      - testing
  pull_request:
    branches:
      - master
      - testing

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==2.0.1
          poetry install --directory terraform-wars-backend
      - name: Run lint
        run: |
          poetry --directory terraform-wars-backend run pre-commit run --all-files --verbose --show-diff-on-failure

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: terraform-wars
          POSTGRES_USER: terraform-wars
          POSTGRES_PASSWORD: terraform-wars
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U terraform-wars -d terraform-wars"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==2.0.1
          poetry install --directory terraform-wars-backend
      - name: Run tests
        run: |
          cd terraform-wars-backend
          poetry run python manage.py makemigrations --dry-run --check
          poetry run pytest --junitxml=junit/test-results.xml --cov=main --cov-report=xml --cov-report=html
        env:
          DJANGO_SETTINGS_MODULE: main.settings.test
          SECRET_KEY: django-secret-key
          BASE_PROTOCOL: http
          BASE_DOMAIN: localhost
          DB_NAME: terraform-wars
          DB_USER: terraform-wars
          DB_PASSWORD: terraform-wars
          DB_HOST: localhost
          DB_PORT: ${{ job.services.postgres.ports[5432] }}
          SESSION_COOKIE_DOMAIN: localhost
          SESSION_COOKIE_SECURE: False
          CSRF_COOKIE_DOMAIN: localhost
          CSRF_COOKIE_SECURE: False
          CSRF_TRUSTED_ORIGINS: http://127.0.0.1:8080,http://localhost:8080,http://127.0.0.1:4200,http://localhost:4200
          CORS_ALLOWED_ORIGINS: http://127.0.0.1:8080,http://localhost:8080,http://127.0.0.1:4200,http://localhost:4200
          ALLOWED_HOSTS: localhost,127.0.0.1
          SECURE_SSL_REDIRECT: False
          USE_CLOUD_STORAGE: False
          EMAIL_HOST: localhost
          EMAIL_HOST_USER: terraform-wars
          EMAIL_HOST_PASSWORD: terraform-wars
          EMAIL_PORT: 1025
          EMAIL_USE_TLS: False
          SENTRY_DSN: local
          SENTRY_ENVIRONMENT: local

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    env:
      IMAGE_URI: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_REPOSITORY }}/app-${{ github.ref == 'refs/heads/master' && 'production' || 'testing' }}:${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_ACCOUNT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure Docker for Google Cloud
        run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.IMAGE_URI }} terraform-wars-backend
          docker push ${{ env.IMAGE_URI }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: production
    env:
      IMAGE_URI: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_REPOSITORY }}/app-production:${{ github.sha }}
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_ACCOUNT }}
      - name: Deploy to Google Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ vars.GCP_SERVICE_NAME }}
          image: ${{ env.IMAGE_URI }}
          project_id: ${{ vars.GCP_PROJECT_ID }}
          region: ${{ vars.GCP_REGION }}

  deploy-testing:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/testing' && github.event_name == 'push'
    environment: testing
    env:
      IMAGE_URI: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_REPOSITORY }}/app-testing:${{ github.sha }}
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_ACCOUNT }}
      - name: Deploy to Google Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ vars.GCP_SERVICE_NAME }}
          image: ${{ env.IMAGE_URI }}
          project_id: ${{ vars.GCP_PROJECT_ID }}
          region: ${{ vars.GCP_REGION }}
